ROS Environment:
On laptop:
	- ROS2 Foxy
	- ROS1 bridge

Created alias so sourcing is easy:
Normal ROS2 work:
	use_foxy


If you need ROS1 tools:
	use_noetic


When running the bridge:
	use_bridge_env
	export ROS_MASTER_URI=http://leo.local:11311
	export ROS_IP=192.168.50.51
	ros2 run ros1_bridge dynamic_bridge
	
currently rover ip on robotlab wifi is: leo.local, or ip adress: 192.168.50.179
laptops ip is currently: 192.168.50.51 

Jetson need to have the same ros environment!!



Gazebo Simulation
- I have created the robot model with velodyne laser
- 2 options, either launch the robot description and gazebo using this command in one terminal:
	ros2 launch leo_gazebo_classic leo_gazebo_launch.py 
  Or run gazebo launch sepereate (in order to launch different worlds) and then launch rsp.launch.py to get the robot description.
  
currently it seems like the laser isnt positioned correctly, or at least the pointscloud think the laser is at the floor, points are a bit off in z direction. 
see claude conversation under master and ROS Gazebo Odom trouble. for summary

- to spawn entity: ros2 run gazebo_ros spawn_entity.py -file /home/lukas/ros2_ws/src/leo_gazebo_classic/description/leo.xacro -entity leo
- run converter from pointcloud2 to scan: 
	ros2 run pointcloud_to_laserscan pointcloud_to_laserscan_node --ros-args -p min_height:=-0.1 -p max_height:=0.5 -p range_min:=0.25 -r cloud_in:=/velodyne_points -r scan:=/scan
	


==================================== Complete SLAM and Navigation Stack ====================================

PACKAGE STRUCTURE:
- leo_gazebo: Robot description (URDF) and Gazebo simulation
- leo_slam: SLAM Toolbox configuration and launch files
- leo_teleop: Joystick teleoperation
- leo_nav2: Nav2 navigation configuration and launch files
- leo_bringup: Master launcher for complete simulation stack

OPTION 1 - Master Launcher (Recommended):
Launch everything with one command:
	ros2 launch leo_bringup bringup_launch.py

This launches:
- Gazebo with Leo robot
- Robot state publisher
- SLAM Toolbox
- Teleoperation
- Pointcloud to laserscan converter
- Nav2 (currently commented out, uncomment nav2_launch in bringup_launch.py to enable)

Then open RViz:
	rviz2

OPTION 2 - Individual Components (for debugging):
1. Launch Gazebo and robot:
	ros2 launch leo_gazebo leo_gazebo_launch.py
	
2. Run pointcloud to laserscan converter:
	ros2 run pointcloud_to_laserscan pointcloud_to_laserscan_node --ros-args -p min_height:=-0.1 -p max_height:=0.5 -p range_min:=0.25 -r cloud_in:=/velodyne_points -r scan:=/scan
	
3. Start SLAM:
	ros2 launch leo_slam slam_launch.py
	
4. Run teleop:
	ros2 launch leo_teleop controller_teleop.launch.py

5. Start Nav2 (optional):
	ros2 launch leo_nav2 nav2_launch.py
	
6. Open RViz:
	rviz2

NAV2 USAGE (once enabled):
- In RViz, add Nav2 displays: Global/Local Costmaps, Global/Local Plans
- Use "2D Goal Pose" button in RViz to set navigation goals. Important: Set it to fixed frame = Map, or the navigation dosent work
- Nav2 will autonomously navigate to the goal








